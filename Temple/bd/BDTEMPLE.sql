IF DB_ID('BDTEMPLE') IS NOT NULL
BEGIN
DROP DATABASE BDTEMPLE
END
GO

CREATE DATABASE BDTEMPLE
GO

USE BDTEMPLE
GO

-- LAS TABLAS

IF OBJECT_ID('TB_ROL') IS NOT NULL
BEGIN
DROP TABLE TB_ROL;
END

CREATE TABLE TB_ROL(
ID_ROL INT NOT NULL,
DES_ROL VARCHAR(30) NOT NULL
)

ALTER TABLE TB_ROL
ADD PRIMARY KEY (ID_ROL)
/*
IF OBJECT_ID('TB_DIA') IS NOT NULL
BEGIN
DROP TABLE TB_DIA;
END

CREATE TABLE TB_DIA(
ID_DIA INT NOT NULL,
DES_DIA VARCHAR(30) NOT NULL
)

ALTER TABLE TB_DIA
ADD PRIMARY KEY (ID_DIA)

INSERT INTO TB_DIA VALUES (1,'LUNES')
INSERT INTO TB_DIA VALUES (2,'MARTES')
INSERT INTO TB_DIA VALUES (3,'MIERCOLES')
INSERT INTO TB_DIA VALUES (4,'JUEVES')
INSERT INTO TB_DIA VALUES (5,'VIERNES')
INSERT INTO TB_DIA VALUES (6,'SABADO')
INSERT INTO TB_DIA VALUES (7,'DOMINGO')


IF OBJECT_ID('TB_HORARIO') IS NOT NULL
BEGIN
DROP TABLE TB_HORARIO;
END

CREATE TABLE TB_HORARIO(
COD_HO INT IDENTITY(1001,1) NOT NULL,
ID_DIA INT,
DES_HO VARCHAR(30) NOT NULL
)

ALTER TABLE TB_HORARIO
ADD PRIMARY KEY (COD_HO),
FOREIGN KEY (ID_DIA) REFERENCES TB_DIA(ID_DIA)

INSERT INTO TB_HORARIO VALUES (1,'8AM A 9AM')
INSERT INTO TB_HORARIO VALUES (1,'9AM A 10AM')
INSERT INTO TB_HORARIO VALUES (1,'10AM A 11AM')
INSERT INTO TB_HORARIO VALUES (1,'11AM A 12AM')
INSERT INTO TB_HORARIO VALUES (1,'12AM A 1PM')
INSERT INTO TB_HORARIO VALUES (1,'1PM A 2PM')
INSERT INTO TB_HORARIO VALUES (1,'2PM A 3PM')
INSERT INTO TB_HORARIO VALUES (1,'3PM A 4PM')
INSERT INTO TB_HORARIO VALUES (1,'4PM A 5PM')
INSERT INTO TB_HORARIO VALUES (1,'5PM A 6PM')
INSERT INTO TB_HORARIO VALUES (1,'6PM A 7PM')
INSERT INTO TB_HORARIO VALUES (1,'7PM A 8PM')
INSERT INTO TB_HORARIO VALUES (1,'8PM A 9PM')
INSERT INTO TB_HORARIO VALUES (1,'9PM A 10PM')
INSERT INTO TB_HORARIO VALUES (1,'10PM A 11PM')
*/
IF OBJECT_ID('TB_GENERO') IS NOT NULL
BEGIN
DROP TABLE TB_GENERO;
END

CREATE TABLE TB_GENERO(
ID_GEN INT NOT NULL,
DES_GEN VARCHAR(20) NOT NULL
)

ALTER TABLE TB_GENERO
ADD PRIMARY KEY (ID_GEN)

IF OBJECT_ID('TB_USUARIO') IS NOT NULL
BEGIN
DROP TABLE TB_USUARIO;
END

CREATE TABLE TB_USUARIO(
COD_USU INT IDENTITY(1001,1) NOT NULL,
NOM_USU VARCHAR(60) NOT NULL,
APA_USU VARCHAR(30) NOT NULL,
AMA_USU VARCHAR(30) NOT NULL,
CORREO_USU VARCHAR(50) UNIQUE NOT NULL,
EDAD_USU INT NOT NULL,
ID_GEN INT NOT NULL,
TEL_USU VARCHAR(20),
LOG_USU VARCHAR(50) NOT NULL,
CLA_USU VARCHAR(50) NOT NULL,
ID_ROL INT NOT NULL,
)

ALTER TABLE TB_USUARIO
ADD PRIMARY KEY (COD_USU),
FOREIGN KEY (ID_ROL) REFERENCES TB_ROL(ID_ROL),
FOREIGN KEY (ID_GEN) REFERENCES TB_GENERO(ID_GEN),
UNIQUE (LOG_USU)



IF OBJECT_ID('TB_PERFIL_USUARIO') IS NOT NULL
BEGIN
DROP TABLE TB_PERFIL_USUARIO;
END

CREATE TABLE TB_PERFIL_USUARIO(
ID_PER INT IDENTITY(1001,1) NOT NULL,
COD_USU INT NOT NULL,
SOBRE_MI VARCHAR(500) NULL DEFAULT 'NO ESPECIFICADO',
BUSCANDO VARCHAR(200) NULL DEFAULT 'NO ESPECIFICADO',
ESPECIALIDAD VARCHAR(50) NULL DEFAULT 'NO ESPECIFICADO',
DIR_CV VARCHAR(50) NULL DEFAULT 'NO ESPECIFICADO',
VERIFICADO BIT NULL DEFAULT 0
)

ALTER TABLE TB_PERFIL_USUARIO
ADD PRIMARY KEY (ID_PER),
FOREIGN KEY (COD_USU) REFERENCES TB_USUARIO (COD_USU)

IF OBJECT_ID('TB_UBICACION_USUARIO') IS NOT NULL
BEGIN
DROP TABLE TB_UBICACION_USUARIO;
END

CREATE TABLE TB_UBICACION_USUARIO(
COD_USU INT NOT NULL,
LAT_USU DECIMAL(8,6) NULL,
LONG_USU DECIMAL(8,6) NULL
)

ALTER TABLE TB_UBICACION_USUARIO
ADD FOREIGN KEY (COD_USU) REFERENCES TB_USUARIO (COD_USU)


IF OBJECT_ID('TB_CATEGORIA_CURSO') IS NOT NULL
BEGIN
DROP TABLE TB_CATEGORIA_CURSO;
END

CREATE TABLE TB_CATEGORIA_CURSO(
ID_CAT INT NOT NULL,
DES_CAT VARCHAR(60) NOT NULL
)

ALTER TABLE TB_CATEGORIA_CURSO
ADD PRIMARY KEY (ID_CAT)

IF OBJECT_ID('TB_SUBCATEGORIAS_CURSO') IS NOT NULL
BEGIN
DROP TABLE TB_SUBCATEGORIAS_CURSO;
END

CREATE TABLE TB_SUBCATEGORIAS_CURSO(
ID_SUB INT NOT NULL,
ID_CAT INT NOT NULL,
DES_SUB VARCHAR(60) NOT NULL
)

ALTER TABLE TB_SUBCATEGORIAS_CURSO
ADD PRIMARY KEY (ID_SUB),
UNIQUE (ID_SUB,ID_CAT),
FOREIGN KEY (ID_CAT) REFERENCES TB_CATEGORIA_CURSO (ID_CAT)

IF OBJECT_ID('TB_HORARIO_INSTRUCTOR') IS NOT NULL
BEGIN
DROP TABLE TB_HORARIO_INSTRUCTOR;
END

CREATE TABLE TB_HORARIO_INSTRUCTOR(
ID_HOR INT IDENTITY(1,1) NOT NULL,
COD_USU INT NOT NULL,
INICIO DATETIME NOT NULL,
FIN DATETIME NOT NULL
)

ALTER TABLE TB_HORARIO_INSTRUCTOR
ADD PRIMARY KEY (ID_HOR),
FOREIGN KEY (COD_USU) REFERENCES TB_USUARIO (COD_USU)

-- ?

IF OBJECT_ID('TB_TUTOR') IS NOT NULL
BEGIN
DROP TABLE TB_TUTOR;
END

CREATE TABLE TB_TUTOR(
COD_TU INT IDENTITY(1001,1) NOT NULL,
NOM_TU VARCHAR(60) NOT NULL,
APA_TU VARCHAR(30) NOT NULL,
AMA_TU VARCHAR(30) NOT NULL,
CORREO_TU VARCHAR(50) UNIQUE NOT NULL,
TELEFONO_TU VARCHAR(20) NOT NULL,
DIRECCION_TU VARCHAR(100) NOT NULL,
LOG_TU VARCHAR(50) NOT NULL,
CLA_TU VARCHAR(50) NOT NULL,
ID_ROL INT NOT NULL,
ID_CAT INT NOT NULL,
ID_SUB INT NOT NULL,
ID_HO INT NOT NULL,
ID_DIA INT NOT NULL
)

ALTER TABLE TB_TUTOR
ADD PRIMARY KEY (COD_TU),
FOREIGN KEY (ID_ROL) REFERENCES TB_ROL(ID_ROL),
FOREIGN KEY (ID_CAT) REFERENCES TB_CATEGORIA_CURSO(ID_CAT),
FOREIGN KEY (ID_SUB) REFERENCES TB_SUBCATEGORIAS_CURSO(ID_SUB),
FOREIGN KEY (ID_HO) REFERENCES TB_HORARIO(COD_HO),
FOREIGN KEY (ID_DIA) REFERENCES TB_DIA(ID_DIA),
UNIQUE (LOG_TU)

IF OBJECT_ID('TB_ESTUDIANTE') IS NOT NULL
BEGIN
DROP TABLE TB_ESTUDIANTE;
END

CREATE TABLE TB_ESTUDIANTE(
COD_E INT IDENTITY(1001,1) NOT NULL,
NOM_E VARCHAR(60) NOT NULL,
APA_E VARCHAR(30) NOT NULL,
AMA_E VARCHAR(30) NOT NULL,
CORREO_E VARCHAR(50) UNIQUE NOT NULL,
TELEFONO_E VARCHAR(20) NOT NULL,
DIRECCION_E VARCHAR(100) NOT NULL,
LOG_E VARCHAR(50) NOT NULL,
CLA_E VARCHAR(50) NOT NULL,
ID_ROL INT NOT NULL,
ID_CAT INT NOT NULL,
ID_SUB INT NOT NULL,

)

ALTER TABLE TB_ESTUDIANTE
ADD PRIMARY KEY (COD_E),
FOREIGN KEY (ID_ROL) REFERENCES TB_ROL(ID_ROL),
FOREIGN KEY (ID_CAT) REFERENCES TB_CATEGORIA_CURSO(ID_CAT),
FOREIGN KEY (ID_SUB) REFERENCES TB_SUBCATEGORIAS_CURSO(ID_SUB),
UNIQUE (LOG_E)

-- ?

IF OBJECT_ID('TB_PREFERENCIA_APRENDIZAJE') IS NOT NULL
BEGIN
DROP TABLE TB_PREFERENCIA_APRENDIZAJE;
END

CREATE TABLE TB_PREFERENCIA_APRENDIZAJE(
ID_PREF INT IDENTITY (1,1) NOT NULL,
COD_USU INT NOT NULL,
ID_CAT INT NOT NULL,
ID_SUB INT NOT NULL
)

ALTER TABLE TB_PREFERENCIA_APRENDIZAJE
ADD PRIMARY KEY(ID_PREF),
UNIQUE (COD_USU,ID_CAT,ID_SUB),
FOREIGN KEY (COD_USU) REFERENCES TB_USUARIO(COD_USU),
FOREIGN KEY (ID_CAT) REFERENCES TB_CATEGORIA_CURSO(ID_CAT),
FOREIGN KEY (ID_SUB) REFERENCES TB_SUBCATEGORIAS_CURSO(ID_SUB)

IF OBJECT_ID('TB_PREFERENCIA_ENSENANZA') IS NOT NULL
BEGIN
DROP TABLE TB_PREFERENCIA_ENSENANZA;
END

CREATE TABLE TB_PREFERENCIA_ENSENANZA(
ID_PREF INT IDENTITY (1,1) NOT NULL,
COD_USU INT NOT NULL,
ID_CAT INT NOT NULL,
ID_SUB INT NOT NULL,
DES_PREF VARCHAR(5000) NOT NULL,
SIL_PREF VARCHAR(5000) NOT NULL
)

ALTER TABLE TB_PREFERENCIA_ENSENANZA
ADD PRIMARY KEY(ID_PREF),
UNIQUE (COD_USU,ID_CAT,ID_SUB),
FOREIGN KEY (COD_USU) REFERENCES TB_USUARIO(COD_USU),
FOREIGN KEY (ID_CAT) REFERENCES TB_CATEGORIA_CURSO(ID_CAT),
FOREIGN KEY (ID_SUB) REFERENCES TB_SUBCATEGORIAS_CURSO(ID_SUB)

IF OBJECT_ID('TB_RESENAS') IS NOT NULL
BEGIN
DROP TABLE TB_RESENAS;
END

CREATE TABLE TB_RESENAS(
ID_RES INT IDENTITY (1001,1) NOT NULL,
ID_PERFIL_REMIT INT NOT NULL,
ID_PERFIL_DESTIN INT NOT NULL,
CONTENIDO VARCHAR(5000) NOT NULL,
FECHAHORA DATETIME NOT NULL,
CALIFICACION INT NOT NULL,
EDITADO BIT NOT NULL DEFAULT 0
)

ALTER TABLE TB_RESENAS
ADD PRIMARY KEY (ID_RES),
FOREIGN KEY (ID_PERFIL_REMIT) REFERENCES TB_PERFIL_USUARIO,
FOREIGN KEY (ID_PERFIL_DESTIN) REFERENCES TB_PERFIL_USUARIO

IF OBJECT_ID('TB_MODALIDAD_ENSENANZA') IS NOT NULL
BEGIN
DROP TABLE TB_MODALIDAD_ENSENANZA;
END

CREATE TABLE TB_MODALIDAD_ENSENANZA(
ID_MOD INT NOT NULL,
DES_MOD VARCHAR(50) NOT NULL
)

ALTER TABLE TB_MODALIDAD_ENSENANZA
ADD PRIMARY KEY (ID_MOD)

IF OBJECT_ID('TB_INSTRUCTOR_MODALIDAD') IS NOT NULL
BEGIN
DROP TABLE TB_INSTRUCTOR_MODALIDAD;
END

CREATE TABLE TB_INSTRUCTOR_MODALIDAD(
COD_USU INT NOT NULL,
ID_MOD INT NOT NULL,
PRECIOHORA DECIMAL (4,2) NOT NULL
)

ALTER TABLE TB_INSTRUCTOR_MODALIDAD
ADD UNIQUE(COD_USU),
FOREIGN KEY (COD_USU) REFERENCES TB_USUARIO (COD_USU),
FOREIGN KEY (ID_MOD) REFERENCES TB_MODALIDAD_ENSENANZA (ID_MOD)

-- SE ENLAZAN, EN UNA RELACIÓN MUCHOS A MUCHOS LAS PREFERENCIAS DE ENSEÑANZA CON LAS MODALIDADES ELEGIDAS
IF OBJECT_ID('TB_PREFERENCIA_ENSENANZA_MODALIDAD') IS NOT NULL
BEGIN
DROP TABLE TB_PREFERENCIA_ENSENANZA_MODALIDAD;
END

CREATE TABLE TB_PREFERENCIA_ENSENANZA_MODALIDAD(
ID_PREF INT NOT NULL,
ID_MOD INT NOT NULL,
PRECIOHORA DECIMAL(4,2)
)

ALTER TABLE TB_PREFERENCIA_ENSENANZA_MODALIDAD
ADD FOREIGN KEY (ID_PREF) REFERENCES TB_PREFERENCIA_ENSENANZA,
FOREIGN KEY (ID_MOD) REFERENCES TB_MODALIDAD_ENSENANZA

IF OBJECT_ID('TB_MENSAJE') IS NOT NULL
BEGIN
DROP TABLE TB_MENSAJE;
END

CREATE TABLE TB_MENSAJE(
ID_CHAT INT NOT NULL,
ID_MEN INT IDENTITY NOT NULL,
COD_REMIT INT NOT NULL,
COD_DESTIN INT NOT NULL,
FECHAHORA DATETIME NOT NULL,
CONTENIDO VARCHAR(500)
)

ALTER TABLE TB_MENSAJE
ADD PRIMARY KEY(ID_MEN),
FOREIGN KEY (COD_REMIT) REFERENCES TB_USUARIO(COD_USU),
FOREIGN KEY (COD_DESTIN) REFERENCES TB_USUARIO(COD_USU)

-- TABLA DE TRANSACCIONES

IF OBJECT_ID('TB_TRANSACCIONES') IS NOT NULL
BEGIN
DROP TABLE TB_TRANSACCIONES;
END

CREATE TABLE TB_TRANSACCIONES(
COD_TRAN INT IDENTITY(1001,1) NOT NULL,
CODINSTR INT NOT NULL,
CODALUMNO INT NOT NULL,
IDCAT INT NOT NULL,
IDSUB INT NOT NULL,
IDMOD INT NOT NULL,
PRECIOHORA DECIMAL(4,2) NOT NULL,
INICIO DATETIME NOT NULL,
FIN DATETIME NOT NULL,
TOTAL DECIMAL(4,2) NOT NULL,
FECHAHORA DATETIME NOT NULL
)

ALTER TABLE TB_TRANSACCIONES
ADD PRIMARY KEY(COD_TRAN),
FOREIGN KEY (CODINSTR) REFERENCES TB_USUARIO (COD_USU),
FOREIGN KEY (CODALUMNO) REFERENCES TB_USUARIO (COD_USU),
FOREIGN KEY (IDCAT) REFERENCES TB_CATEGORIA_CURSO (ID_CAT),
FOREIGN KEY (IDSUB) REFERENCES TB_SUBCATEGORIAS_CURSO (ID_SUB),
FOREIGN KEY (IDMOD) REFERENCES TB_MODALIDAD_ENSENANZA (ID_MOD)

IF OBJECT_ID('TB_ANUNCIO_INSTRUCTOR') IS NOT NULL
BEGIN
DROP TABLE TB_ANUNCIO_INSTRUCTOR;
END

CREATE TABLE TB_ANUNCIO_INSTRUCTOR(
ID_AN INT IDENTITY(1,1) NOT NULL,
COD_INSTR INT NOT NULL,
TITULO VARCHAR(100) NOT NULL,
CONTENIDO VARCHAR(500) NOT NULL,
FECHAHORA DATETIME NOT NULL
)

ALTER TABLE TB_ANUNCIO_INSTRUCTOR
ADD PRIMARY KEY (ID_AN),
FOREIGN KEY (COD_INSTR) REFERENCES TB_USUARIO (COD_USU)

-- LOS TIGRES

IF OBJECT_ID('UTR_PERFIL_USUARIO') IS NOT NULL
BEGIN
DROP TRIGGER UTR_PERFIL_USUARIO;
END
GO

CREATE TRIGGER UTR_PERFIL_USUARIO
ON TB_USUARIO
AFTER INSERT
AS
BEGIN
INSERT INTO TB_PERFIL_USUARIO
SELECT I.COD_USU,'NO ESPECIFICADO','NO ESPECIFICADO','NO ESPECIFICADO','NO ESPECIFICADO',0 FROM INSERTED I
END
GO

-- LAS FUNCIONES
IF OBJECT_ID('UFN_CORRELATIVO_USUARIO') IS NOT NULL
BEGIN
DROP FUNCTION UFN_CORRELATIVO_USUARIO;
END
GO

CREATE FUNCTION UFN_CORRELATIVO_USUARIO ()
RETURNS INT
AS
BEGIN
	DECLARE @CODIGO INT;	
	SET @CODIGO=(SELECT MAX(COD_USU) FROM TB_USUARIO)
	SET @CODIGO=@CODIGO+1;
	RETURN @CODIGO;
END
GO

IF OBJECT_ID('UFN_CORRELATIVO_CHAT') IS NOT NULL
BEGIN
DROP FUNCTION UFN_CORRELATIVO_CHAT;
END
GO

-- GENERA UN CÓDIGO DE CONVERSACIÓN O CHAT A CADA CONVERSACIÓN INICIADA
CREATE FUNCTION UFN_CORRELATIVO_CHAT ()
RETURNS INT
AS
BEGIN
DECLARE @CODIGO INT
	IF (EXISTS(SELECT*FROM TB_MENSAJE))
	BEGIN
		SET @CODIGO=(SELECT MAX(ID_CHAT) FROM TB_MENSAJE)
		SET @CODIGO=@CODIGO+1
	END
	ELSE
	BEGIN
		SET @CODIGO=1
	END
	RETURN @CODIGO
END
GO

IF OBJECT_ID('UFN_PUEDE_RESENAR') IS NOT NULL
BEGIN
DROP FUNCTION UFN_PUEDE_RESENAR;
END
GO

CREATE FUNCTION UFN_PUEDE_RESENAR (@CODREMIT INT, @CODDESTIN INT)
RETURNS BIT
AS
BEGIN
-- ESTOY EN UNA RELACIÓN DE AMOR-ODIO CON EL VISUAL STUDIO. ¿QUIÉN LE HA DICHO QUE CIERRE MIS SESIONES? BUENO, AÚN ASÍ NO PREFIERO ECLIPSE JEE PARA WEB JAJAJA
-- PREFIERO ESTO A EDITAR MIS 1000 INTERFACES, MIS ACTIONS, MIS JSP Y COMPILAR MIS 500 .WAR JAJAJA
	DECLARE @PERMITIDOS INT
	DECLARE @IDPERFILREMIT INT
	DECLARE @IDPERFILDESTIN INT
	DECLARE @ACTUALES INT
	-- EL NÚMERO DE RESEÑAS QUE PUEDES HACER DEBE SER <= QUE EL NÚMERO DE TRANSACCIONES REALIZADAS CON EL INSTRUCTOR
	SET @PERMITIDOS = (SELECT COUNT(*) FROM TB_TRANSACCIONES WHERE CODALUMNO=@CODREMIT AND CODINSTR=@CODDESTIN)
	
	-- OBTENGO LOS ID DE PERFIL SEGÚN LOS CÓDIGOS DE USUARIO
	SET @IDPERFILREMIT = (SELECT ID_PER FROM TB_PERFIL_USUARIO WHERE COD_USU=@CODREMIT)
	SET @IDPERFILDESTIN = (SELECT ID_PER FROM TB_PERFIL_USUARIO WHERE COD_USU=@CODDESTIN)

	SET @ACTUALES= (SELECT COUNT(*) FROM TB_RESENAS WHERE ID_PERFIL_REMIT=@IDPERFILREMIT AND ID_PERFIL_DESTIN=@IDPERFILDESTIN)
	-- PRIMERO PREGUNTO SI LOS PERMITIDOS SON > 0 PORQUE LÓGICAMENTE SERÍA LA MISMA RESTRICCIÓN

	-- AQUÍ RECIÉN PUEDO INSERTAR LA RESEÑA
	IF (@ACTUALES<@PERMITIDOS)
	BEGIN
		RETURN 1
	END
		RETURN 0
END
GO

-- LOS PROCEDIMIENTOS

IF OBJECT_ID('USP_LOGIN') IS NOT NULL
BEGIN
DROP PROCEDURE USP_LOGIN;
END
GO

CREATE PROCEDURE USP_LOGIN (@USUARIO VARCHAR(50), @CONTRASENA VARCHAR(50))
AS
BEGIN
	SELECT U.COD_USU, U.NOM_USU, U.APA_USU, U.AMA_USU, U.CORREO_USU, U.EDAD_USU,U.ID_GEN,U.TEL_USU,U.LOG_USU, U.ID_ROL, R.DES_ROL
	FROM TB_USUARIO U
	JOIN TB_ROL R
	ON R.ID_ROL=U.ID_ROL
	WHERE U.LOG_USU=@USUARIO AND U.CLA_USU=@CONTRASENA
END
GO

IF OBJECT_ID('USP_OBTENER_PREFERENCIAS_APRENDIZAJE') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_PREFERENCIAS_APRENDIZAJE;
END
GO

CREATE PROCEDURE USP_OBTENER_PREFERENCIAS_APRENDIZAJE (@CODUSU INT)
AS
BEGIN
SELECT P.ID_CAT, C.DES_CAT, P.ID_SUB, S.DES_SUB
FROM TB_PREFERENCIA_APRENDIZAJE P
INNER JOIN TB_CATEGORIA_CURSO C
ON P.ID_CAT=C.ID_CAT
INNER JOIN TB_SUBCATEGORIAS_CURSO S
ON S.ID_SUB=P.ID_SUB
INNER JOIN TB_USUARIO U
ON P.COD_USU=U.COD_USU
WHERE P.COD_USU=@CODUSU
END
GO

IF OBJECT_ID('USP_OBTENER_INSTRUCTORES_RECOMENDADOS_PREFERENCIA') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_INSTRUCTORES_RECOMENDADOS_PREFERENCIA;
END
GO

CREATE PROCEDURE USP_OBTENER_INSTRUCTORES_RECOMENDADOS_PREFERENCIA (@IDSUB INT)
AS
BEGIN
SELECT P.COD_USU, U.NOM_USU, U.APA_USU, U.AMA_USU, (SELECT PU.ESPECIALIDAD FROM TB_PERFIL_USUARIO PU WHERE PU.COD_USU=P.COD_USU),
		'10KM',5,4,(SELECT PU.VERIFICADO FROM TB_PERFIL_USUARIO PU WHERE PU.COD_USU=P.COD_USU)
FROM TB_PREFERENCIA_ENSENANZA P
INNER JOIN
TB_USUARIO U
ON U.COD_USU=P.COD_USU
WHERE U.ID_ROL=1 AND P.ID_SUB=@IDSUB;
END
GO

IF OBJECT_ID('USP_OBTENER_INSTRUCTORES_BUSQUEDA') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_INSTRUCTORES_BUSQUEDA;
END
GO

CREATE PROCEDURE USP_OBTENER_INSTRUCTORES_BUSQUEDA (@IDCAT INT, @IDSUB INT)
AS
BEGIN
SELECT P.COD_USU, U.NOM_USU, U.APA_USU, U.AMA_USU, (SELECT PU.ESPECIALIDAD FROM TB_PERFIL_USUARIO PU WHERE PU.COD_USU=P.COD_USU),
		'10KM',5,4,(SELECT PU.VERIFICADO FROM TB_PERFIL_USUARIO PU WHERE PU.COD_USU=P.COD_USU)
FROM TB_PREFERENCIA_ENSENANZA P
INNER JOIN
TB_USUARIO U
ON U.COD_USU=P.COD_USU
WHERE U.ID_ROL=1 AND P.ID_CAT=@IDCAT AND P.ID_SUB=@IDSUB;
END
GO

IF OBJECT_ID('USP_OBTENER_CATEGORIAS') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_CATEGORIAS;
END
GO

CREATE PROCEDURE USP_OBTENER_CATEGORIAS
AS
BEGIN
SELECT ID_CAT, DES_CAT FROM TB_CATEGORIA_CURSO
END
GO

IF OBJECT_ID('USP_OBTENER_SUBCATEGORIAS') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_SUBCATEGORIAS;
END
GO

CREATE PROCEDURE USP_OBTENER_SUBCATEGORIAS (@IDCAT INT)
AS
BEGIN
SELECT ID_SUB, DES_SUB FROM TB_SUBCATEGORIAS_CURSO
WHERE ID_CAT=@IDCAT
END
GO

IF OBJECT_ID('USP_OBTENER_UBICACION_USUARIO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_UBICACION_USUARIO;
END
GO

CREATE PROCEDURE USP_OBTENER_UBICACION_USUARIO (@CODUSU INT)
AS
BEGIN
SELECT LAT_USU, LONG_USU FROM TB_UBICACION_USUARIO
WHERE COD_USU=@CODUSU
END
GO

IF OBJECT_ID('USP_OBTENER_UBICACIONES_USUARIOS') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_UBICACIONES_USUARIOS;
END
GO

CREATE PROCEDURE USP_OBTENER_UBICACIONES_USUARIOS (@CODUSUORIG INT, @CODUSUOBJ INT)
AS
BEGIN
SELECT U1.LAT_USU AS LAT_ORIG, U1.LONG_USU AS LONG_ORIG,
(SELECT U3.LAT_USU FROM TB_UBICACION_USUARIO U3 WHERE U3.COD_USU=@CODUSUOBJ) AS LAT_OBJ,
(SELECT U2.LONG_USU FROM TB_UBICACION_USUARIO U2 WHERE U2.COD_USU=@CODUSUOBJ) AS LONG_OBJ
FROM TB_UBICACION_USUARIO U1 WHERE U1.COD_USU=@CODUSUORIG
END
GO
/*
IF OBJECT_ID('USP_REGISTRAR_TUTOR') IS NOT NULL
BEGIN
DROP PROCEDURE USP_REGISTRAR_TUTOR;
END
GO

CREATE PROCEDURE USP_REGISTRAR_TUTOR(@ID INT,@NOM VARCHAR(60),@APP VARCHAR(30),@APM VARCHAR(30),@CO VARCHAR(50),@FONO VARCHAR(20),@DIRE VARCHAR(100),
@IDCA INT,@IDSUB INT,@LOG VARCHAR(50),@CLA VARCHAR(50),@ROL INT)
AS
BEGIN
INSERT INTO TB_TUTOR VALUES (@ID,@NOM,@APP,@APM,@CO,@FONO,@DIRE,@IDCA,@IDSUB,@LOG,@CLA,@ROL )
END
GO

IF OBJECT_ID('USP_REGISTRAR_ESTUDIANTE') IS NOT NULL
BEGIN
DROP PROCEDURE USP_REGISTRAR_ESTUDIANTE;
END
GO

CREATE PROCEDURE USP_REGISTRAR_ESTUDIANTE(@ID INT,@NOM VARCHAR(60),@APP VARCHAR(30),@APM VARCHAR(30),@CO VARCHAR(50),@FONO VARCHAR(20),@DIRE VARCHAR(100),
@IDCA INT,@IDSUB INT,@LOG VARCHAR(50),@CLA VARCHAR(50),@ROL INT)
AS
BEGIN
INSERT INTO TB_ESTUDIANTE VALUES (@ID,@NOM,@APP,@APM,@CO,@FONO,@DIRE,@IDCA,@IDSUB,@LOG,@CLA,@ROL)
END
GO
*/

IF OBJECT_ID('USP_OBTENER_PERFIL_INSTRUCTOR') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_PERFIL_INSTRUCTOR;
END
GO

CREATE PROCEDURE USP_OBTENER_PERFIL_INSTRUCTOR (@CODUSU INT)
AS
BEGIN
SELECT U.COD_USU, U.NOM_USU, U.APA_USU, U.AMA_USU, PU.ESPECIALIDAD, PU.SOBRE_MI, PU.DIR_CV, 5, PU.VERIFICADO,CAST(1 AS BIT),UU.LAT_USU, UU.LONG_USU, PU.ID_PER
FROM TB_USUARIO U 
INNER JOIN TB_PERFIL_USUARIO PU
ON U.COD_USU=PU.COD_USU
INNER JOIN TB_UBICACION_USUARIO UU
ON U.COD_USU=UU.COD_USU
WHERE U.ID_ROL=1 AND U.COD_USU=@CODUSU
END
GO

IF OBJECT_ID('USP_OBTENER_PERFIL_ALUMNO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_PERFIL_ALUMNO;
END
GO

CREATE PROCEDURE USP_OBTENER_PERFIL_ALUMNO (@CODUSU INT)
AS
BEGIN
SELECT U.COD_USU, U.NOM_USU, U.APA_USU, U.AMA_USU, PU.SOBRE_MI, PU.BUSCANDO, PU.VERIFICADO,CAST(1 AS BIT),UU.LAT_USU, UU.LONG_USU, PU.ID_PER
FROM TB_USUARIO U 
INNER JOIN TB_PERFIL_USUARIO PU
ON U.COD_USU=PU.COD_USU
INNER JOIN TB_UBICACION_USUARIO UU
ON U.COD_USU=UU.COD_USU
WHERE U.ID_ROL=2 AND U.COD_USU=@CODUSU
END
GO

IF OBJECT_ID('USP_OBTENER_RESENAS') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_RESENAS;
END
GO

CREATE PROCEDURE USP_OBTENER_RESENAS (@IDPERFIL INT)
AS
BEGIN
SELECT R.ID_RES, U.COD_USU, R.ID_PERFIL_REMIT, U.NOM_USU, U.APA_USU, U.AMA_USU, R.ID_PERFIL_DESTIN, R.CONTENIDO, R.FECHAHORA, R.CALIFICACION, R.EDITADO
FROM TB_RESENAS R
INNER JOIN TB_PERFIL_USUARIO PU
ON R.ID_PERFIL_REMIT=PU.ID_PER
INNER JOIN TB_USUARIO U
ON PU.COD_USU=U.COD_USU
WHERE R.ID_PERFIL_DESTIN = @IDPERFIL
ORDER BY R.FECHAHORA DESC
END
GO

IF OBJECT_ID('USP_OBTENER_PREFERENCIAS_ENSENANZA') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_PREFERENCIAS_ENSENANZA;
END
GO

CREATE PROCEDURE USP_OBTENER_PREFERENCIAS_ENSENANZA (@CODUSU INT)
AS
BEGIN
SELECT PE.ID_CAT, CC.DES_CAT, PE.ID_SUB, SC.DES_SUB, PE.DES_PREF, PE.SIL_PREF --,PE.COD_USU
FROM TB_PREFERENCIA_ENSENANZA PE
INNER JOIN TB_CATEGORIA_CURSO CC
ON PE.ID_CAT=CC.ID_CAT
INNER JOIN TB_SUBCATEGORIAS_CURSO SC
ON PE.ID_SUB=SC.ID_SUB
WHERE PE.COD_USU=@CODUSU
END
GO

IF OBJECT_ID('USP_OBTENER_MODALIDADES_ENSENANZA') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_MODALIDADES_ENSENANZA;
END
GO

CREATE PROCEDURE USP_OBTENER_MODALIDADES_ENSENANZA (@IDCAT INT, @IDSUB INT, @CODUSU INT)
AS
BEGIN
DECLARE @IDPREF INT
SET @IDPREF = (SELECT ID_PREF FROM TB_PREFERENCIA_ENSENANZA WHERE COD_USU=@CODUSU AND ID_CAT=@IDCAT AND ID_SUB=@IDSUB)

SELECT PEM.ID_MOD, ME.DES_MOD, PEM.PRECIOHORA FROM TB_PREFERENCIA_ENSENANZA_MODALIDAD PEM
INNER JOIN TB_MODALIDAD_ENSENANZA ME
ON PEM.ID_MOD=ME.ID_MOD
WHERE PEM.ID_PREF=@IDPREF
END
GO

IF OBJECT_ID('USP_OBTENER_PEDIDO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_PEDIDO;
END
GO

CREATE PROCEDURE USP_OBTENER_PEDIDO (@CODINSTR INT, @IDCAT INT, @IDSUB INT, @IDMOD INT)
AS
BEGIN
	
	DECLARE @IDPREF INT
	SET @IDPREF=(SELECT ID_PREF FROM TB_PREFERENCIA_ENSENANZA WHERE ID_CAT=@IDCAT AND ID_SUB=@IDSUB AND COD_USU=@CODINSTR)

	SELECT U.NOM_USU+' '+U.APA_USU+' '+U.AMA_USU,
	(SELECT SC.DES_SUB FROM TB_SUBCATEGORIAS_CURSO SC WHERE SC.ID_CAT=@IDCAT AND SC.ID_SUB=@IDSUB),
	(SELECT ME.DES_MOD FROM TB_MODALIDAD_ENSENANZA ME WHERE ME.ID_MOD=@IDMOD),
	(SELECT PEM.PRECIOHORA FROM TB_PREFERENCIA_ENSENANZA_MODALIDAD PEM WHERE PEM.ID_PREF=@IDPREF AND PEM.ID_MOD=@IDMOD)
	FROM TB_USUARIO U WHERE U.ID_ROL=1 AND U.COD_USU=@CODINSTR
END
GO

IF OBJECT_ID('USP_REGISTRAR_TRANSACCION') IS NOT NULL
BEGIN
DROP PROCEDURE USP_REGISTRAR_TRANSACCION;
END
GO

CREATE PROCEDURE USP_REGISTRAR_TRANSACCION(@CODINSTR INT, @CODALUMNO INT, @IDCAT INT, @IDSUB INT, @IDMOD INT, @PRECIOHORA DECIMAL, @INICIO DATETIME, @FIN DATETIME, @TOTAL DECIMAL)
AS
BEGIN
	-- AQUÍ DEBO OBTENER EL HORARIO DEL INSTRUCTOR Y VACIARLO PARA QUE ENCAJE CON LA RESERVA
	-- MILA, AÚN TE EXTRAÑO :(
	DECLARE @IDHOR INT
	 
	SET @IDHOR=(SELECT TOP 1 ID_HOR FROM TB_HORARIO_INSTRUCTOR WHERE (@INICIO BETWEEN INICIO AND FIN) AND (@FIN BETWEEN INICIO AND FIN))
	IF (@IDHOR!='')
	BEGIN
		DECLARE @INICIOAUX DATETIME
		DECLARE @FINAUX DATETIME
		DECLARE @CODINSTRAUX INT

		SET @INICIOAUX=(SELECT INICIO FROM TB_HORARIO_INSTRUCTOR WHERE ID_HOR=@IDHOR)
		SET @FINAUX=(SELECT FIN FROM TB_HORARIO_INSTRUCTOR WHERE ID_HOR=@IDHOR)
		SET @CODINSTRAUX=(SELECT COD_USU FROM TB_HORARIO_INSTRUCTOR WHERE ID_HOR=@IDHOR)
		-- UNA VEZ QUE TENGO LOS DATOS, PROCEDO A PARTIR LOS HORARIOS
		DELETE FROM TB_HORARIO_INSTRUCTOR WHERE ID_HOR=@IDHOR

		-- PREGUNTO SI NO SE HA RESERVADO CON EXACTITUD. AL FINAL, LAS VARIABLES _AUX SON LAS QUE SE VAN A INSERTAR
		IF (@INICIOAUX!=@INICIO AND @FINAUX!=@FIN)
		BEGIN
			-- AQUÍ, HAGO LA REPARTIJA, AL PRIMERO LÍMITE LE RESTO UN MINUTO
			INSERT INTO TB_HORARIO_INSTRUCTOR VALUES (@CODINSTRAUX, @INICIOAUX, DATEADD(MINUTE, -1, @INICIO))
			
			-- LA SEGUNDA INSERCIÓN
			INSERT INTO TB_HORARIO_INSTRUCTOR VALUES (@CODINSTRAUX, DATEADD(MINUTE,1,@FIN),@FINAUX)
		END
		ELSE
		BEGIN
			IF (@INICIOAUX=@INICIO)
			BEGIN
				INSERT INTO TB_HORARIO_INSTRUCTOR VALUES (@CODINSTRAUX, DATEADD(MINUTE,1,@FIN),@FINAUX)
			END
			IF (@FINAUX=@FIN)
			BEGIN
				INSERT INTO TB_HORARIO_INSTRUCTOR VALUES (@CODINSTRAUX, @INICIOAUX, DATEADD(MINUTE, -1, @INICIO))
			END
		END

	END
	-- FINALMENTE, HAGO LA ÚLTIMA INSERCIÓN QUE ES LA DE TRANSACCIÓN. PRIMERO TUVE QUE MODIFICAR LOS HORARIOS.
	-- CABE RECALCAR, QUE ESTA LÓGICA SE PUEDE MEJORAR SI A CADA HORARIOS LE PONEMOS UN TIPO, YA SEA 'DISPONIBILIDAD' Y 'CITA'
	-- PARA QUE LOS DATOS DE LA TABLA TRANSACCIONES Y CITAS ESTÉN EN TABLAS INDEPENDIENTES
	INSERT INTO TB_TRANSACCIONES VALUES(@CODINSTR,@CODALUMNO,@IDCAT,@IDSUB,@IDMOD,@PRECIOHORA,@INICIO,@FIN,@TOTAL,GETDATE())

END
GO

IF OBJECT_ID('USP_REGISTRAR_USUARIO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_REGISTRAR_USUARIO;
END
GO

CREATE PROCEDURE USP_REGISTRAR_USUARIO	(@NOMUSU VARCHAR(60),@APAUSU VARCHAR(60), @AMAUSU VARCHAR(60),
										@CORREO VARCHAR(50), @EDAD INT, @IDGEN INT, @TEL VARCHAR(20),
										@LOGUSU VARCHAR(50), @CLAUSU VARCHAR(50), @IDROL INT, @SOBREMI VARCHAR(500),
										@BUSCANDO VARCHAR(200), @ESPECIALIDAD VARCHAR(200))
AS
BEGIN
	-- EL CICLO, MI ABUELA Y MI RELACIÓN ESTÁN DESDE HACE UN TIEMPO EN LARGA AGONÍA. TODOS ESTÁN A PUNTO DE MORIR
	-- ACTUALIZACIÓN: MI RELACIÓN PARECE QUE SE SALVÓ
	BEGIN TRY
    -- BEGIN TRANSACTION
        DECLARE @CODUSU INT
	
		INSERT INTO TB_USUARIO VALUES (@NOMUSU,@APAUSU,@AMAUSU,@CORREO,@EDAD,@IDGEN,@TEL,@LOGUSU,@CLAUSU,@IDROL)
		
		SET @CODUSU=(SELECT COD_USU FROM TB_USUARIO WHERE LOG_USU=@LOGUSU AND CLA_USU=@CLAUSU)

		UPDATE TB_PERFIL_USUARIO SET SOBRE_MI=@SOBREMI, BUSCANDO=@BUSCANDO, ESPECIALIDAD=@ESPECIALIDAD WHERE COD_USU=@CODUSU
		-- COMMIT
		SELECT @CODUSU
        

	END TRY
	BEGIN CATCH
		SELECT -1
		-- ROLLBACK
	END CATCH
	
END
GO

IF OBJECT_ID('USP_REGISTRAR_PREFERENCIA_APRENDIZAJE') IS NOT NULL
BEGIN
DROP PROCEDURE USP_REGISTRAR_PREFERENCIA_APRENDIZAJE;
END
GO

CREATE PROCEDURE USP_REGISTRAR_PREFERENCIA_APRENDIZAJE	(@CODUSU INT, @IDCAT INT, @IDSUB INT)
AS
BEGIN
	INSERT INTO TB_PREFERENCIA_APRENDIZAJE VALUES (@CODUSU, @IDCAT, @IDSUB)
END
GO

IF OBJECT_ID('USP_REGISTRAR_PREFERENCIA_ENSENANZA') IS NOT NULL
BEGIN
DROP PROCEDURE USP_REGISTRAR_PREFERENCIA_ENSENANZA;
END
GO

CREATE PROCEDURE USP_REGISTRAR_PREFERENCIA_ENSENANZA (@CODUSU INT, @IDCAT INT, @IDSUB INT, @DESPREF VARCHAR(200), @SILPREF VARCHAR(200))
AS
BEGIN
	INSERT INTO TB_PREFERENCIA_ENSENANZA VALUES (@CODUSU, @IDCAT, @IDSUB,@DESPREF,@SILPREF)
	DECLARE @IDPREF INT
	SET @IDPREF= SCOPE_IDENTITY()	
	SELECT @IDPREF
END
GO

IF OBJECT_ID('USP_REGISTRAR_PREFERENCIA_ENSENANZA_MODALIDAD') IS NOT NULL
BEGIN
DROP PROCEDURE USP_REGISTRAR_PREFERENCIA_ENSENANZA_MODALIDAD;
END
GO

CREATE PROCEDURE USP_REGISTRAR_PREFERENCIA_ENSENANZA_MODALIDAD (@IDPREF INT, @IDMOD INT, @PRECIOHORA DECIMAL)
AS
BEGIN
	INSERT INTO TB_PREFERENCIA_ENSENANZA_MODALIDAD VALUES (@IDPREF,@IDMOD,@PRECIOHORA)
END
GO

IF OBJECT_ID('USP_INSERTAR_ANUNCIO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_INSERTAR_ANUNCIO;
END
GO

CREATE PROCEDURE USP_INSERTAR_ANUNCIO (@CODINSTR INT, @CONTENIDO VARCHAR(500), @TITULO VARCHAR(100))
AS
BEGIN
	INSERT INTO TB_ANUNCIO_INSTRUCTOR VALUES (@CODINSTR,@TITULO,@CONTENIDO,GETDATE())
END
GO

IF OBJECT_ID('USP_OBTENER_ANUNCIOS_POR_ALUMNO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_ANUNCIOS_POR_ALUMNO;
END
GO

CREATE PROCEDURE USP_OBTENER_ANUNCIOS_POR_ALUMNO (@CODALU INT)
AS
BEGIN
SELECT A.ID_AN, A.COD_INSTR, U.NOM_USU, U.APA_USU, U.AMA_USU, A.TITULO, A.CONTENIDO, A.FECHAHORA FROM TB_ANUNCIO_INSTRUCTOR A
INNER JOIN
TB_USUARIO U
ON A.COD_INSTR=U.COD_USU
WHERE A.COD_INSTR IN (SELECT DISTINCT(T.CODINSTR) FROM TB_TRANSACCIONES T WHERE CODALUMNO=@CODALU)
END
GO

IF OBJECT_ID('USP_INSERTAR_EVENTO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_INSERTAR_EVENTO;
END
GO

CREATE PROCEDURE USP_INSERTAR_EVENTO (@CODINSTR INT, @INICIO DATETIME, @FIN DATETIME)
AS
BEGIN
	/*
	-- CUANDO TE DAS CUENTA DE QUE ESTO SE PUDO HACER SIN CURSORES JAJAJA. YO SOLO ME COMPLICO LA VIDA
	DECLARE @CONTADOR INT=0
	DECLARE @TOTALREGISTROS INT
	DECLARE @INICIOAUX DATETIME
	DECLARE @FINAUX DATETIME

	DECLARE CURSOR_HORARIOS CURSOR FOR 
	SELECT INICIO, FIN FROM TB_HORARIO_INSTRUCTOR WHERE COD_USU=@CODINSTR

	SET @TOTALREGISTROS = (SELECT COUNT(COD_USU) FROM TB_HORARIO_INSTRUCTOR WHERE COD_USU=@CODINSTR)

	OPEN CURSOR_HORARIOS

	FETCH NEXT FROM CURSOR_HORARIOS INTO @INICIOAUX, @FINAUX

	WHILE @@FETCH_STATUS=0

	BEGIN
		IF ((@INICIO BETWEEN @INICIOAUX AND @FINAUX)OR(@FIN BETWEEN @INICIOAUX AND @FINAUX)OR(@INICIO<@INICIOAUX AND @FIN>@FINAUX))
		BEGIN
			SELECT 'Los horarios se sobreponen'
			GOTO EXITCURSOR
		END
		ELSE
		BEGIN
			SET @CONTADOR=@CONTADOR+1
		END
		FETCH NEXT FROM CURSOR_HORARIOS INTO @INICIOAUX, @FINAUX
	END
	EXITCURSOR:
	CLOSE CURSOR_HORARIOS
	DEALLOCATE CURSOR_HORARIOS

	IF (@CONTADOR>=@TOTALREGISTROS)
	BEGIN
		INSERT INTO TB_HORARIO_INSTRUCTOR VALUES (@CODINSTR, @INICIO, @FIN)
		SELECT 'Se insertó correctamente'
	END*/
	-- VAMO'A HACER SIN CURSORES A VER
	IF (EXISTS(SELECT * FROM TB_HORARIO_INSTRUCTOR WHERE ((@INICIO BETWEEN INICIO AND FIN)OR(@FIN BETWEEN INICIO AND FIN)OR(@INICIO<INICIO AND @FIN>FIN)) AND COD_USU=@CODINSTR))
	BEGIN
		SELECT 'Los horarios se sobreponen'
	END
	ELSE
	BEGIN
		INSERT INTO TB_HORARIO_INSTRUCTOR VALUES (@CODINSTR, @INICIO, @FIN)
		SELECT 'Se insertó correctamente'
	END
END
GO

IF OBJECT_ID('USP_MODIFICAR_EVENTO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_MODIFICAR_EVENTO;
END
GO

CREATE PROCEDURE USP_MODIFICAR_EVENTO (@CODINSTR INT, @INICIO DATETIME, @FIN DATETIME, @IDEVEN INT)
AS
BEGIN
	/*
	DECLARE @CONTADOR INT=0
	DECLARE @TOTALREGISTROS INT
	DECLARE @INICIOAUX DATETIME
	DECLARE @FINAUX DATETIME
	DECLARE @IDEVENAUX INT

	DECLARE CURSOR_HORARIOS CURSOR FOR 
	SELECT ID_HOR, INICIO, FIN FROM TB_HORARIO_INSTRUCTOR WHERE COD_USU=@CODINSTR

	SET @TOTALREGISTROS = (SELECT COUNT(COD_USU) FROM TB_HORARIO_INSTRUCTOR WHERE COD_USU=@CODINSTR)

	OPEN CURSOR_HORARIOS

	FETCH NEXT FROM CURSOR_HORARIOS INTO @IDEVENAUX, @INICIOAUX, @FINAUX

	WHILE @@FETCH_STATUS=0

	BEGIN
	IF (@IDEVENAUX!=@IDEVEN)
	BEGIN
		IF ((@INICIO BETWEEN @INICIOAUX AND @FINAUX)OR(@FIN BETWEEN @INICIOAUX AND @FINAUX)OR(@INICIO<@INICIOAUX AND @FIN>@FINAUX))
		BEGIN
			SELECT 'Los horarios se sobreponen'
			GOTO EXITCURSOR
		END
		ELSE
		BEGIN
			SET @CONTADOR=@CONTADOR+1
		END
	END
		FETCH NEXT FROM CURSOR_HORARIOS INTO @IDEVENAUX, @INICIOAUX, @FINAUX
	END
	EXITCURSOR:
	CLOSE CURSOR_HORARIOS
	DEALLOCATE CURSOR_HORARIOS

	IF (@CONTADOR>=@TOTALREGISTROS-1)
	BEGIN
		UPDATE TB_HORARIO_INSTRUCTOR SET INICIO=@INICIO, FIN=@FIN WHERE ID_HOR=@IDEVEN
		SELECT 'Se modificó correctamente'
	END*/
	IF (EXISTS(SELECT * FROM TB_HORARIO_INSTRUCTOR WHERE ((@INICIO BETWEEN INICIO AND FIN)OR(@FIN BETWEEN INICIO AND FIN)OR(@INICIO<INICIO AND @FIN>FIN)) AND ID_HOR!=@IDEVEN AND COD_USU=@CODINSTR))
	BEGIN
		SELECT 'Los horarios se sobreponen'
	END
	ELSE
	BEGIN
		UPDATE TB_HORARIO_INSTRUCTOR SET INICIO=@INICIO, FIN=@FIN WHERE ID_HOR=@IDEVEN
		SELECT 'Se modificó correctamente'
	END
END

GO

IF OBJECT_ID('USP_TRANSACCIONES_ALUMNO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_TRANSACCIONES_ALUMNO;
END
GO

CREATE PROCEDURE USP_TRANSACCIONES_ALUMNO (@CODUSU INT)
AS
BEGIN
 SELECT T.COD_TRAN, T.CODINSTR, U.NOM_USU, U.APA_USU, U.AMA_USU, CC.DES_CAT, SC.DES_SUB, ME.DES_MOD, T.PRECIOHORA, T.INICIO, T.FIN, T.TOTAL, T.FECHAHORA
 FROM TB_TRANSACCIONES T
 INNER JOIN TB_USUARIO U
 ON T.CODINSTR=U.COD_USU
 INNER JOIN TB_CATEGORIA_CURSO CC
 ON CC.ID_CAT=T.IDCAT
 INNER JOIN TB_SUBCATEGORIAS_CURSO SC
 ON SC.ID_SUB=T.IDSUB
 INNER JOIN TB_MODALIDAD_ENSENANZA ME
 ON T.IDMOD=ME.ID_MOD
 WHERE T.CODALUMNO=@CODUSU
END
GO

IF OBJECT_ID('USP_TRANSACCIONES_INSTRUCTOR') IS NOT NULL
BEGIN
DROP PROCEDURE USP_TRANSACCIONES_INSTRUCTOR;
END
GO

CREATE PROCEDURE USP_TRANSACCIONES_INSTRUCTOR (@CODUSU INT)
AS
BEGIN
 SELECT T.COD_TRAN, T.CODALUMNO, U.NOM_USU, U.APA_USU, U.AMA_USU, CC.DES_CAT, SC.DES_SUB, ME.DES_MOD, T.PRECIOHORA, T.INICIO, T.FIN, T.TOTAL, T.FECHAHORA
 FROM TB_TRANSACCIONES T
 INNER JOIN TB_USUARIO U
 ON T.CODALUMNO=U.COD_USU
 INNER JOIN TB_CATEGORIA_CURSO CC
 ON CC.ID_CAT=T.IDCAT
 INNER JOIN TB_SUBCATEGORIAS_CURSO SC
 ON SC.ID_SUB=T.IDSUB
 INNER JOIN TB_MODALIDAD_ENSENANZA ME
 ON T.IDMOD=ME.ID_MOD
 WHERE T.CODINSTR=@CODUSU
END
GO

IF OBJECT_ID('USP_ENVIAR_MENSAJE') IS NOT NULL
BEGIN
DROP PROCEDURE USP_ENVIAR_MENSAJE;
END
GO

CREATE PROCEDURE USP_ENVIAR_MENSAJE (@CODREMIT INT, @CODDESTIN INT, @CONTENIDO VARCHAR(500))
AS
BEGIN

DECLARE @IDCHAT INT
	
	-- PRIMERO VERIFICO SI YA EXISTEN CHATS ENTRE ESOS DOS USUARIOS
	IF (EXISTS (SELECT * FROM TB_MENSAJE WHERE (COD_REMIT=@CODREMIT AND COD_DESTIN=@CODDESTIN) OR (COD_REMIT=@CODDESTIN AND COD_DESTIN=@CODREMIT)))
	BEGIN
		-- SI EXISTEN, QUE USEN ESE MISMO CÓDIGO DE CHAT
		SET @IDCHAT=(SELECT TOP 1 (ID_CHAT) FROM TB_MENSAJE WHERE (COD_REMIT=@CODREMIT AND COD_DESTIN=@CODDESTIN) OR (COD_REMIT=@CODDESTIN AND COD_DESTIN=@CODREMIT))
	END
	ELSE
	BEGIN
		-- SI NO, QUE EL SISTEMA LES ASIGNE UN CORRELATIVO
		SET @IDCHAT=(SELECT DBO.UFN_CORRELATIVO_CHAT())		
	END

	INSERT INTO TB_MENSAJE VALUES (@IDCHAT, @CODREMIT, @CODDESTIN, GETDATE(), @CONTENIDO)
END
GO

IF OBJECT_ID('USP_OBTENER_IDS_CHATS') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_IDS_CHATS;
END
GO

CREATE PROCEDURE USP_OBTENER_IDS_CHATS (@CODUSU1 INT, @CODUSU2 INT)
AS
BEGIN
	SELECT DISTINCT(ID_CHAT) FROM TB_MENSAJE WHERE (COD_REMIT=@CODUSU1 AND COD_DESTIN=@CODUSU2) OR (COD_REMIT=@CODUSU2 AND COD_DESTIN=@CODUSU1)
END
GO

IF OBJECT_ID('USP_OBTENER_IDS_CHATS_USUARIO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_IDS_CHATS_USUARIO;
END
GO

CREATE PROCEDURE USP_OBTENER_IDS_CHATS_USUARIO (@CODUSU INT)
AS
BEGIN
	SELECT DISTINCT(ID_CHAT) FROM TB_MENSAJE WHERE COD_REMIT=@CODUSU OR COD_DESTIN=@CODUSU
END
GO

IF OBJECT_ID('USP_OBTENER_MENSAJES_POR_CHAT') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_MENSAJES_POR_CHAT;
END
GO

CREATE PROCEDURE USP_OBTENER_MENSAJES_POR_CHAT (@IDCHAT INT)
AS
BEGIN
	SELECT M.ID_CHAT, M.ID_MEN, M.COD_REMIT, U1.NOM_USU, U1.APA_USU, U1.AMA_USU, R1.DES_ROL,
	M.COD_DESTIN, U2.NOM_USU, U2.APA_USU, U2.AMA_USU, R2.DES_ROL, M.FECHAHORA, M.CONTENIDO FROM TB_MENSAJE M
	INNER JOIN TB_USUARIO U1
	ON U1.COD_USU=M.COD_REMIT
	INNER JOIN TB_USUARIO U2
	ON U2.COD_USU=M.COD_DESTIN
	INNER JOIN TB_ROL R1
	ON R1.ID_ROL=U1.ID_ROL
	INNER JOIN TB_ROL R2
	ON R2.ID_ROL=U2.ID_ROL
	WHERE M.ID_CHAT=@IDCHAT
	ORDER BY M.FECHAHORA ASC
END
GO

IF OBJECT_ID('USP_INSERTAR_RESENA') IS NOT NULL
BEGIN
DROP PROCEDURE USP_INSERTAR_RESENA;
END
GO

CREATE PROCEDURE USP_INSERTAR_RESENA (@CODREMIT INT, @CODDESTIN INT, @CONTENIDO VARCHAR(5000), @CALIFICACION INT)
AS
BEGIN
	DECLARE @PERMITIDOS INT
	DECLARE @IDPERFILREMIT INT
	DECLARE @IDPERFILDESTIN INT
	DECLARE @ACTUALES INT
	-- EL NÚMERO DE RESEÑAS QUE PUEDES HACER DEBE SER <= QUE EL NÚMERO DE TRANSACCIONES REALIZADAS CON EL INSTRUCTOR
	SET @PERMITIDOS = (SELECT COUNT(*) FROM TB_TRANSACCIONES WHERE CODALUMNO=@CODREMIT AND CODINSTR=@CODDESTIN)
		
	-- OBTENGO LOS ID DE PERFIL SEGÚN LOS CÓDIGOS DE USUARIO
	SET @IDPERFILREMIT = (SELECT ID_PER FROM TB_PERFIL_USUARIO WHERE COD_USU=@CODREMIT)
	SET @IDPERFILDESTIN = (SELECT ID_PER FROM TB_PERFIL_USUARIO WHERE COD_USU=@CODDESTIN)

	SET @ACTUALES= (SELECT COUNT(*) FROM TB_RESENAS WHERE ID_PERFIL_REMIT=@IDPERFILREMIT AND ID_PERFIL_DESTIN=@IDPERFILDESTIN)

	-- AQUÍ RECIÉN PUEDO INSERTAR LA RESEÑA
	IF (@ACTUALES<@PERMITIDOS)
	BEGIN
		INSERT INTO TB_RESENAS VALUES (@IDPERFILREMIT,@IDPERFILDESTIN,@CONTENIDO,GETDATE(),@CALIFICACION, DEFAULT)
		SELECT 'Comentario publicado correctamente'
	END
	
	SELECT 'Solo puedes insertar un comentario por cada transacción que tengas con este instructor'
		
END
GO

IF OBJECT_ID('USP_ACTUALIZAR_RESENA') IS NOT NULL
BEGIN
DROP PROCEDURE USP_ACTUALIZAR_RESENA;
END
GO

CREATE PROCEDURE USP_ACTUALIZAR_RESENA (@CODREMIT INT, @IDRES INT, @CONTENIDO VARCHAR(5000), @CALIFICACION INT)
AS
BEGIN
	DECLARE @CODUSUREMITAUX INT
	

	DECLARE @IDPERFILREMIT INT
	DECLARE @IDPERFILDESTIN INT
			
	-- OBTENGO LOS ID DE PERFIL SEGÚN LOS CÓDIGOS DE USUARIO
	SET @IDPERFILREMIT = (SELECT ID_PER FROM TB_PERFIL_USUARIO WHERE COD_USU=@CODREMIT)
	SET @CODUSUREMITAUX=(SELECT COD_USU FROM TB_PERFIL_USUARIO WHERE ID_PER=(SELECT ID_PERFIL_REMIT FROM TB_RESENAS WHERE ID_RES=@IDRES))
	
	-- HAGO UNA VALIDACIÓN PARA VERIFICAR QUE EFECTIVAMENTE LO INSERTA QUIEN DICE SER
	IF (@CODUSUREMITAUX = @CODREMIT)
	BEGIN
		-- AHORA PREGUNTO SI EL COMENTARIO HA SIDO EDITADO
		IF ((SELECT EDITADO FROM TB_RESENAS WHERE ID_RES=@IDRES)=0)
		BEGIN
			-- AQUÍ RECIÉN PUEDO ACTUALIZAR
			UPDATE TB_RESENAS SET CONTENIDO=@CONTENIDO, FECHAHORA=GETDATE(), CALIFICACION=@CALIFICACION, EDITADO=1 WHERE ID_RES=@IDRES
			SELECT 'Comentario actualizado correctamente'
		END
		ELSE
		BEGIN
			SELECT 'Ya has sobrepasado la cantidad permitida de ediciones para este comentario'
		END
	END
		ELSE
		BEGIN
			SELECT 'No puedes actualizar un comentario del que no eres remitente'
		END		
END
GO

IF OBJECT_ID('USP_ACTUALIZAR_UBICACION_USUARIO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_ACTUALIZAR_UBICACION_USUARIO;
END
GO

CREATE PROCEDURE USP_ACTUALIZAR_UBICACION_USUARIO (@CODUSU INT, @LATITUD DECIMAL(8,6), @LONGITUD DECIMAL(8,6))
AS
BEGIN
	UPDATE TB_UBICACION_USUARIO SET LAT_USU=@LATITUD, LONG_USU=@LONGITUD WHERE COD_USU=@CODUSU
END
GO

-- LAS INSERCIONES
USE BDTEMPLE
INSERT INTO TB_ROL VALUES	(1,'Instructor'),
							(2,'Alumno'),
							(3,'Admin')
GO

INSERT INTO TB_GENERO VALUES	(1,'FEMENINO'),
								(2,'MASCULINO')

INSERT INTO TB_USUARIO VALUES	('Vane','Sita','Sita','vanesita@gmail.com',21,1,'98765432','vane','sita',2),
								('Dámaso','López','Aragón','damaso@gmail.com',45,2,'98765432','damaso','damaso',1),
								('José','Antúcar','Guzmán','antucar@gmail.com',43,2,'98765432','antucar','antucar',1),
								('Giovani','Corazón','De Mel´´on','gricardov@gmail.com',23,2,'98765432','gricardov','gricardov',3),
								('Juanito','Perez','Quispe','jperez@gmail.com',22,2,'98765432','jperez','jperez',2),
								('Bruno','Mars','Mars','bmars@gmail.com',29,2,'98765432','bmars','bmars',2),
								('Milton','Perez','Aguilat','caledan@gmail.com',23,1,'98765432','mperez','mperez',2),
								('Lidia','Sánchez','Cuchi','plsanche@gmail.com',44,1,'98765432','plsanche','plsanche',1),
								('Ysa','Bella','Bella','ysabella@gmail.com',23,1,'98765432','ysabella','ysabella',2),
								('Raúl','Jiménez','Drago','drago@gmail.com',38,2,'98765432','drago','drago',1)
GO

UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Soy una chica bien guapa que le pareció novedosa esta idea de instructores en línea', BUSCANDO='Busco a un profesor que sea puntual y profesional', ESPECIALIDAD=' ' WHERE COD_USU=1002
UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Profesor con una gran trayectoria en la enseñanza de cursos de computación. Me caracterizo por ser amable y profesional en mi trabajo', BUSCANDO=' ', ESPECIALIDAD='Programación, bases de datos y diseño web' WHERE COD_USU=1003
UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Profesor con gran experiencia y paciencia en la enseñanza de cursos de programación. Me encanta que mis alumnos aprendan', BUSCANDO=' ', ESPECIALIDAD='Programación en Java SE y EE' WHERE COD_USU=1004
UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Soy un estudiante que busca aprender mucho', BUSCANDO='Que sepa bastante como Dámaso', ESPECIALIDAD=' ' WHERE COD_USU=1005
UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Soy un chico que antes era chica', BUSCANDO='Profesores que sean amables', ESPECIALIDAD=' ' WHERE COD_USU=1006
UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Im a guy that loves studying and singing; and would really like to support this idea. TEMPLE is great!', BUSCANDO='Im looking for teachers that can speak English and teach me some Spanish, Hope they are patient', ESPECIALIDAD=' ' WHERE COD_USU=1007
UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Soy un estudiante de Cibertec que busca aprender mucho con este sistema', BUSCANDO='Busco docentes con experiencia y que sepan enseñar bien', ESPECIALIDAD=' ' WHERE COD_USU=1008
UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Docente con experiencia en la enseñanza de Bases de datos, Modelado de negocios y amor a los gatos. Me dicen Cuchi', BUSCANDO=' ', ESPECIALIDAD='Bases de datos y MPN' WHERE COD_USU=1009
UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Soy una chica bien bonita que busca aprender mucho en este sistema', BUSCANDO='Profesores que tengan experiencia comprobada en la enseñanza de cursos', ESPECIALIDAD=' ' WHERE COD_USU=1010
UPDATE TB_PERFIL_USUARIO SET SOBRE_MI='Docente con experiencia en la enseñanza de Diseño de sistemas', BUSCANDO=' ', ESPECIALIDAD='Diseño de sistemas' WHERE COD_USU=1011

INSERT INTO TB_UBICACION_USUARIO	VALUES	(1002,-12.164681,-76.986371),
											(1003,-12.164031,-76.991758),
											(1004,-12.160638,-76.972015),
											(1005,-12.164744,-76.988309),
											(1006,-12.177455,-77.019825),
											(1007,-12.193731,-77.002575),
											(1008,-12.181062,-76.938708),
											(1009,-12.183481,-70.548154),
											(1010,-12.187578,-69.415741),
											(1011,-11.999847,-72.154871)

INSERT INTO TB_CATEGORIA_CURSO VALUES	(1,'Ciencias naturales'),
										(2,'Ciencias exactas'),
										(3,'Ciencias de la salud'),
										(4,'Ciencias del comportamiento'),
										(5,'Ciencias políticas'),
										(6,'Ciencias de la comunicación'),
										(7,'Ciencias de la computación'),
										(8,'Ciencias sociales'),
										(9,'Artes manuales'),
										(10,'Música'),
										(11,'Danzas'),
										(12,'Deportes y entrenamiento'),
										(13,'Juegos de habilidad'),
										(14,'Teatro'),
										(15,'Relajación y calidad de vida'),
										(16,'Idiomas'),
										(17,'Preparación preuniversitaria'),
										(18,'Preparación exámenes internacionales'),
										(19,'Asesoría de tesis'),
										(20,'Solución de exámenes')
GO

INSERT INTO TB_SUBCATEGORIAS_CURSO VALUES	(1,1,'Biología'),
											(2,1,'Zoología'),
											(3,1,'Botánica'),
											(4,2,'Matemáticas'),
											(5,2,'Física'),
											(6,2,'Química'),
											(7,3,'Incisiones'),
											(8,3,'Diagnóstico'),
											(9,3,'Evaluación'),
											(10,3,'Inyectables'),
											(11,13,'Ajedrez'),
											(12,13,'Go'),
											(13,16,'Inglés'),
											(14,16,'Francés'),
											(15,7,'SQL Server'),
											(16,7,'Programación en Java'),
											(17,7,'Programación .NET'),
											(18,7,'Diseño web'),
											(19,7,'Base de datos')
GO

INSERT INTO TB_PREFERENCIA_APRENDIZAJE VALUES	(1001,2,4),
												(1001,1,1),
												(1002,1,1),
												(1002,7,16),
												(1002,7,17),
												(1006,7,16),
												(1007,7,17),
												(1008,1,1),
												(1008,2,6),
												(1010,1,3),
												(1010,1,1),
												(1010,3,9)
GO

INSERT INTO TB_PREFERENCIA_ENSENANZA VALUES		(1003,7,15,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 1 2 3'),
												(1003,7,17,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 2 3 4'),
												(1003,7,18,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 1 1'),
												(1004,7,16,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 2 3'),
												(1009,1,2,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 2'),
												(1009,3,9,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 1'),
												(1009,7,16,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 1 2'),
												(1009,7,17,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 1 3'),
												(1003,1,2,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 1 3'),
												(1011,7,15,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 3'),
												(1011,1,2,'ESTE ES UN CURSO MUY BUENO','TEMAS A DESARROLLAR: 1 1 3')
GO

INSERT INTO TB_MODALIDAD_ENSENANZA VALUES		(1,'PERSONALIZADO (1 ALUMNO)'),
												(2,'GRUPAL (2+ ALUMNOS)'),
												(3,'FULL EJERCICIOS'),
												(4,'FULL TEORÍA'),
												(5,'PREPARACIÓN PARA EXAMEN'),
												(6,'SOLUCIÓN DE EXAMEN'),
												(7,'OTRO (CONSULTAR)')

INSERT INTO TB_PREFERENCIA_ENSENANZA_MODALIDAD VALUES	(1,1,12.50),
														(1,2,10.50),
														(1,5,15.00),
														(2,1,14.00),
														(3,1,12.00),
														(4,1,10.00),
														(4,2,9.00),
														(5,1,12.00),
														(5,2,13.00),
														(6,1,12.00),
														(6,2,13.00),
														(7,1,12.00),
														(7,2,13.00),
														(7,3,14.00),
														(8,1,9.00),
														(9,5,15.00),
														(10,1,9.00),
														(11,1,11.00)

-- PARA LAS RESEÑAS

/*INSERT INTO TB_RESENAS VALUES	(1010,1003,'LINDA MIS, SABE BASTANTE',GETDATE(),5,DEFAULT),
								(1011,1003,'QUÉ TERNURA DE MISS',GETDATE(),5,DEFAULT)*/


-- PARA LOS HORARIOS
INSERT INTO TB_HORARIO_INSTRUCTOR VALUES	(1009,CONVERT(DATETIME,GETDATE(),126),CONVERT(DATETIME,DATEADD(HOUR, 1, GETDATE()),126)),
											(1009,CONVERT(DATETIME,DATEADD(DAY, 1, GETDATE()),126),CONVERT(DATETIME,DATEADD(HOUR, 1, DATEADD(DAY, 1, GETDATE())),126))


SELECT P.COD_USU, U.NOM_USU, U.APA_USU, U.AMA_USU, (SELECT PU.ESPECIALIDAD FROM TB_PERFIL_USUARIO PU WHERE PU.COD_USU=P.COD_USU),
		'10KM',5,4,(SELECT PU.VERIFICADO FROM TB_PERFIL_USUARIO PU WHERE PU.COD_USU=P.COD_USU),C.ID_CAT, C.DES_CAT, SC.ID_SUB, SC.DES_SUB
FROM TB_PREFERENCIA_ENSENANZA P
INNER JOIN
TB_USUARIO U
ON U.COD_USU=P.COD_USU
INNER JOIN
TB_CATEGORIA_CURSO C
ON P.ID_CAT=C.ID_CAT
INNER JOIN
TB_SUBCATEGORIAS_CURSO SC
ON P.ID_SUB=SC.ID_SUB

IF OBJECT_ID('USP_OBTENER_INSTRUCTORES') IS NOT NULL
BEGIN
DROP PROCEDURE USP_OBTENER_INSTRUCTORES;
END
GO

CREATE PROCEDURE USP_OBTENER_INSTRUCTORES
AS
BEGIN
SELECT P.COD_USU, U.NOM_USU, U.APA_USU, U.AMA_USU, (SELECT PU.ESPECIALIDAD FROM TB_PERFIL_USUARIO PU WHERE PU.COD_USU=P.COD_USU),
		'10KM',5,4,(SELECT PU.VERIFICADO FROM TB_PERFIL_USUARIO PU WHERE PU.COD_USU=P.COD_USU)
FROM TB_PREFERENCIA_ENSENANZA P
INNER JOIN
TB_USUARIO U
ON U.COD_USU=P.COD_USU
WHERE U.ID_ROL=1
END
GO

IF OBJECT_ID('USP_ACTUALIZAR_USUARIO') IS NOT NULL
BEGIN
DROP PROCEDURE USP_ACTUALIZAR_USUARIO;
END
GO

CREATE PROCEDURE USP_ACTUALIZAR_USUARIO	(@CODUSU INT,@NOMUSU VARCHAR(60),@APAUSU VARCHAR(60), @AMAUSU VARCHAR(60),
										@CORREO VARCHAR(50), @EDAD INT, @TEL VARCHAR(20),
										 @CLAUSU VARCHAR(50), @SOBREMI VARCHAR(500))
AS
BEGIN
	UPDATE TB_USUARIO
	SET NOM_USU=@NOMUSU,APA_USU=@APAUSU,AMA_USU=@AMAUSU,CORREO_USU=@CORREO,EDAD_USU=@EDAD,
	TEL_USU=@TEL,CLA_USU= @CLAUSU
	WHERE COD_USU=@CODUSU
	update TB_PERFIL_USUARIO
	set sobre_mi= @SOBREMI
	WHERE COD_USU=@CODUSU
END
GO
