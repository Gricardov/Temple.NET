
@{
    ViewBag.Title = "Mis Horarios";
    Layout = "~/Views/Shared/_LayoutTemple.cshtml";
}

<!--El calendario-->
<link rel="stylesheet" href="~/Content/fullcalendar.css" />
<script src="~/Content/fullcalendar.js" type="text/javascript"></script>

<h2>Editar mis horarios</h2>
<small>Para editar un horario existente, solo modifíquelo. Para agregar uno nuevo, arrastre sobre un espacio vacío.</small>

<div id="calendario" class="row">
    <div id='calendar' style="max-height: 1000px; overflow:auto; margin: 5px;"></div>
</div>

<!--Para el model de confirmación-->

<div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true" id="modalConfirmacion">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Confirmar acción</h4>
            </div>
            <div class="modal-body">
                <p id="txtModalConfirmacion"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="btnSi">Sí</button>
                <button type="button" class="btn btn-primary" id="btnNo">No</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true" id="modalMensaje">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Confirmar acción</h4>
            </div>
            <div class="modal-body">
                <p id="txtModalMensaje"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="btnListo">Listo</button>
            </div>
        </div>
    </div>
</div>

<div class="alert" role="alert" id="result"></div>

<script>
    // Al cargar la página

    // Defino las constantes para insertar o actualizar horarios
    const INSERTAR = 0;
    const MODIFICAR = 1;
    const ELIMINAR = 2;

    var operacionActual = -1;

    var revertir;
    // Variable que sirve para revertir la función

    @using System.Web.Script.Serialization;

            @{
               var jsonHorarios = @Html.Raw(new JavaScriptSerializer().Serialize(ViewBag.horarios));
               var jsonCitas = @Html.Raw(new JavaScriptSerializer().Serialize(ViewBag.citas));
            }

        

            // Para el calendario
    var jsonHorarios = JSON.parse('@jsonHorarios');
    var jsonCitas = JSON.parse('@jsonCitas');

    $('#calendar').fullCalendar({

            defaultView: 'agendaWeek',
            slotEventOverlap: true,
            allDaySlot: false,
            allDayText: false,
            nowIndicator: true,
            selectable: true,
            selectHelper: true,
            header: {
                left: 'title',
                center: '',
                right: 'today prev,next'
            },
            titleFormat: 'D/MM/YYYY',
            buttonText: {
                today: 'Ir a hoy',
                month: 'Ver mes',
                week: 'Ver semana',
                day: 'Ver día',
                list: 'Lista'
            },
            eventBackgroundColor: 'blue',
            themeSystem: 'bootstrap4',
            contentHeight: '600',
            columnHeaderFormat: 'ddd M/D',
            validRange: function (nowDate) {
                return {
                    start: nowDate.clone().subtract(1, 'day'),
                    end: nowDate.clone().add(1, 'months')
                };
            },
            columnHeaderText: function (mom) {

                if (mom.weekday() === 1) {
                    return 'Lunes';
                }

                else if (mom.weekday() === 2) {
                    return 'Martes';
                }
                else if (mom.weekday() === 3) {
                    return 'Miércoles';
                }
                else if (mom.weekday() === 4) {
                    return 'Jueves';
                }
                else if (mom.weekday() === 5) {
                    return 'Viernes';
                }
                else if (mom.weekday() === 6) {
                    return 'Sábado';
                }
                else if (mom.weekday() === 0) {
                    return 'Domingo';
                }
                else {
                    return mom.format('LLL');
                }
            }, rendering: true,
            eventClick: function (calEvent, jsEvent, view) {

                var inicio = moment(calEvent.start).format("HH:mm:ss");
                var fin = moment(calEvent.end).format("HH:mm:ss");

                alert("Has seleccionado el horario: \n\nInicio: " + inicio + "\nFin: " + fin + "\n Id: " + calEvent.id);

            },
            eventResize: function (event, delta, revertFunc) {
                
                var contadorHorarios = 0;

                var inicioSeleccionado = moment(event.start).add(5, 'hours');
                var finSeleccionado = moment(event.end).add(5, 'hours');

                for (var i in jsonHorarios) {

                    // Solo va a verificar los que sean diferentes del horario seleccionado
                    if (event.id != jsonHorarios[i].id) {

                    var inicioMs = parseInt((jsonHorarios[i].inicio.replace("/Date(", "").replace(")/", "")));
                    var finMs = parseInt((jsonHorarios[i].fin.replace("/Date(", "").replace(")/", "")));

                    if ((inicioSeleccionado >= inicioMs && inicioSeleccionado <= finMs) ||
                        (finSeleccionado >= inicioMs && finSeleccionado <= finMs) ||
                        (inicioSeleccionado < inicioMs && finSeleccionado > finMs)) {

                        alert("Este horario se sobrepone a otro");

                        revertFunc();

                        return;

                    }

                    contadorHorarios++;
                }

                }

                // Le resto 1 porque aquí habría comparado uno menos
                if (contadorHorarios >= jsonHorarios.length-1) {

                    var evento = new Object();
                    evento.id = event.id;
                    evento.inicio = event.start;
                    evento.fin = event.end;
                    // Coloco la operación actual
                    operacionActual = MODIFICAR;
                    mostrarModalConfirmacion(evento);
                    revertir = revertFunc;
                }

            },
            select: function (start, end, jsEvent, view, resource) {

                var contadorHorarios = 0;
                
                var inicioSeleccionado = moment(start).add(5, 'hours');
                var finSeleccionado = moment(end).add(5, 'hours');

                    for (var i in jsonHorarios) {

                        var inicioMs = parseInt((jsonHorarios[i].inicio.replace("/Date(", "").replace(")/", "")));
                        var finMs = parseInt((jsonHorarios[i].fin.replace("/Date(", "").replace(")/", "")));

                        if ((inicioSeleccionado >= inicioMs && inicioSeleccionado <= finMs) ||
                            (finSeleccionado >= inicioMs && finSeleccionado <= finMs) ||
                            (inicioSeleccionado < inicioMs && finSeleccionado > finMs)) {

                            /*alert("obt: "+moment(inicioMs).format("HH:mm:ss") + " " + moment(finMs).format("HH:mm:ss") +
                                " sel: " + moment(inicioSeleccionado).format("HH:mm:ss") + " " + moment(finSeleccionado).format("HH:mm:ss"));
                            
                            /*alert("obt: " + inicioMs + " " + finMs+
                                " sel: " + inicioSeleccionado + " " + finSeleccionado);*/
                                alert("Has seleccionado un horario que se sobrepone a otro. Si quieres modificar uno ya existente, solo modifica su tamaño");

                            $('#calendar').fullCalendar('unselect');
                                
                            return;

                        }

                        contadorHorarios++;


                    }

                if (contadorHorarios >= jsonHorarios.length) {
                    
                    var evento = new Object();
                    evento.inicio = start;
                    evento.fin = end;

                    // Coloco la operación actual
                    operacionActual = INSERTAR;

                    mostrarModalConfirmacion(evento);                    

                    }

            },
            eventDrop: function (event, delta, revertFunc, jsEvent, ui, view) {
                var contadorHorarios = 0;

                var inicioSeleccionado = moment(event.start).add(5, 'hours');
                var finSeleccionado = moment(event.end).add(5, 'hours');

                for (var i in jsonHorarios) {

                    // Solo va a verificar los que sean diferentes del horario seleccionado
                    if (event.id != jsonHorarios[i].id) {

                        var inicioMs = parseInt((jsonHorarios[i].inicio.replace("/Date(", "").replace(")/", "")));
                        var finMs = parseInt((jsonHorarios[i].fin.replace("/Date(", "").replace(")/", "")));

                        if ((inicioSeleccionado >= inicioMs && inicioSeleccionado <= finMs) ||
                            (finSeleccionado >= inicioMs && finSeleccionado <= finMs) ||
                            (inicioSeleccionado < inicioMs && finSeleccionado > finMs)) {

                            alert("Este horario se sobrepone a otro");

                            revertFunc();

                            return;

                        }

                        contadorHorarios++;
                    }

                }

                // Le resto 1 porque aquí habría comparado uno menos
                if (contadorHorarios >= jsonHorarios.length - 1) {

                    var evento = new Object();
                    evento.id = event.id;
                    evento.inicio = event.start;
                    evento.fin = event.end;
                    // Coloco la operación actual
                    operacionActual = MODIFICAR;
                    mostrarModalConfirmacion(evento);
                    revertir = revertFunc;
                }

            },
            overlap: false,
            editable: true,
            startEditable: true,
            snapDuration: "00:01:00"


    });

    cargarHorariosYCitas();
    

    function cargarHorariosYCitas() {

        var eventos = [];
        for (var i in jsonHorarios) {

            var id = jsonHorarios[i].id;
            var inicioMs = parseInt(jsonHorarios[i].inicio.replace("/Date(", "").replace(")/", ""));
            var finMs = parseInt(jsonHorarios[i].fin.replace("/Date(", "").replace(")/", ""));
            
            var evento = {
                id: id,
                title: 'Disponible',
                start: moment(inicioMs),
                end: moment(finMs),
                editable: true,
                startEditable: true,
                backgroundColor: 'green',
                //rendering: 'background',
                selectHelper: true
            }
            eventos.push(evento);

            //$('#calendar').fullCalendar('renderEvent', evento, true);

        }

        for (var i in jsonCitas) {

            var id = -1;
            var inicioMs = parseInt(jsonCitas[i].inicio.replace("/Date(", "").replace(")/", ""));
            var finMs = parseInt(jsonCitas[i].fin.replace("/Date(", "").replace(")/", ""));

            var evento = {
                id: id,
                title: 'Reservado',
                start: moment(inicioMs),
                end: moment(finMs),
                editable: false,
                startEditable: false,
                backgroundColor: 'red',
                //rendering: 'background',
                selectHelper: false
            }
            eventos.push(evento);

            //$('#calendar').fullCalendar('renderEvent', evento, true);

        }

        $('#calendar').fullCalendar('removeEvents');

        //$('#calendar').fullCalendar('removeEventSource', eventos);
        $('#calendar').fullCalendar('addEventSource', eventos);

    }

    // Todo bugueado me vino el fullcalendar jajaja, debo recurrir a este truco
    $('.fc-next-button').click();

    // Para el modal de confirmación

    function mostrarModalConfirmacion(evento) {

        var inicio = moment(evento.inicio).format("L HH:mm:ss");
        var fin = moment(evento.fin).format("L HH:mm:ss");

        switch (operacionActual) {

            case INSERTAR:
                $("#txtModalConfirmacion").text("Has seleccionado el horario desde las " + inicio + " hasta las " + fin + ". ¿Guardar?");
                break;
            case MODIFICAR:
                $("#txtModalConfirmacion").text("Has modificado este horario desde las " + inicio + " hasta las " + fin + ". ¿Guardar?");
                break;
            case ELIMINAR:
                $("#txtModalConfirmacion").text("¿Estás seguro de que quieres eliminar el horario desde las " + inicio + " hasta las " + fin + "?");
                break;
        }


        $("#modalConfirmacion").modal('show');

        $("#btnSi").unbind("click").click(function () {            
            // Hago el ajax
            var url = "";
            var data;
            switch (operacionActual) {

                case INSERTAR:

                    url = "@Url.Action("insertarEvento", "Instructor")";
                    data = { inicio: parseInt(moment(evento.inicio).format("x")), fin: parseInt(moment(evento.fin).format("x")) };
                    break;
                case MODIFICAR:
                    url = "@Url.Action("modificarEvento", "Instructor")";
                    data = { id: evento.id, inicio: parseInt(moment(evento.inicio).format("x")), fin: parseInt(moment(evento.fin).format("x")) };
                    break;
                case ELIMINAR:

                    url = "@Url.Action("eliminarEvento", "Instructor")";
                    data = { id:evento.id };
                    break;
            }

            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: "json",
                success: function (response) {

                    $("#modalMensaje").modal('show');
                    $("#txtModalMensaje").text(response.mensaje);

                    // Limpiamos jsonHorarios y lo volvemos a llenar
                    jsonHorarios = [];
                    jsonCitas = [];
                    for (var i in response.eventos) {

                        var evento = new Object();
                        evento.id = response.eventos[i].id;
                        evento.inicio = response.eventos[i].inicio;
                        evento.fin = response.eventos[i].fin;
                        jsonHorarios.push(evento);
                    }

                    for (var i in response.citas) {
                        var evento = new Object();
                        evento.id = -1;
                        evento.inicio = response.citas[i].inicio;
                        evento.fin = response.citas[i].fin;
                        jsonCitas.push(evento);

                    }

                    cargarHorariosYCitas();

                  }



            });

            $("#modalConfirmacion").modal('hide');
            $("#txtModalConfirmacion").text("");
        });

        $("#btnNo").unbind("click").on("click", function () {
            $("#modalConfirmacion").modal('hide');
            $("#txtModalConfirmacion").text("");

            switch (operacionActual) {

                case INSERTAR:
                    $('#calendar').fullCalendar('unselect');
                    break;
                case MODIFICAR:
                    revertir();
                    break;
                case ELIMINAR:
                    //revertFunc();
                    break;


            }

        });

        $("#btnListo").unbind("click").on("click", function () {
            $("#modalMensaje").modal('hide');
            $("#txtModalMensaje").text("");

            



        });

    }

</script>